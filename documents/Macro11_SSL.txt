S/SL Syntax:
	: 	Declaration
	{}	Loop statement
	>	Loop exit
	[]	case/if statement
	|	case/if alternative
	@	call statement
	>>	return statement

	rules
	-Called using the action @
	-return using the >> action, or by falling off the end of the rule

	actions
	Call	@	-call
	Return	>>	-return
	Input	x	-recognize an input token (i.e. process input token from stream)
	Emit	.x	-generate an output token
	Error	#x	-generate an error token
	Cycle	{}	-loop
	Exit	>	-exit a cycle loop
	Choice	[]	-choose between a set of actions

		Input Action
		-implicit; token may be specified in one of three forms
			-symbolic name (e.g. pColonEquals)
			-string synonym (e.g. ':=')
			-wilcard (matching any next input token (?))




input:			%input token definitions

output:			%output token definitions


type Type:		%type constant definitions


mechanism Mechanism:	%semantic mechanism operation definitions
