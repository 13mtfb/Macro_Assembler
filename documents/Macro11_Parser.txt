Macro11_Parser

-Scan the entire line in mainline, pass as vector to parser object
-Pass compound token values as vector to parser object
-Every time parser encounters a compound token it calls a screener function
which may change the token value and can provide further data (ex. opcode type)
at the same time.

input:
//from scanner

output:
//Addressing modes
aRegisterMode (R)
aRegisterDeferredMode (@R or (ER))
aAutoIncrementMode ((ER+))
aAutoIncrementDeferredMode (@(ER)+)
aAutoDecrementMode (-(ER))
aAutoDecrementDeferredMode (@-(ER))
aIndexMode (E(ER))
aIndexDeferredMode (@E(ER)
aImmediateMode (#E)
aAbsoluteMode (@#E)
aRelativeMode (E)
aRelativeDeferredMode (@E)
//instruction emit
aSingleOperand
aDoubleOperand
aBranch
aJumpSubroutineRTS
aJumpSubroutineMARK
aJumpSubroutineSOB
aTrapInterrupt
aConditionCode
aMiscellaneous
aMiscellaneousSPL

// mechanisms
oChooseExpression
	% return the most recently evaluated expression type (absolute, relocatable, external, complex relocatable)
oChooseExpressionValue
	% return the value of the most recently evaluated expression (must be absolute expression)
oChooseSymbol (symbol)
	% return the type of expression
		Opcode - if symbol matches string in opcode table (PST)
		AssemblerDirective - if symbol matches string in the assembler directive table (PST)
		MacroCall - if symbol matches string in the macro symbol table (MST)
		Symbol - if found in the UST. The following attributes are set
			Register - symbol is a register mnemonic (R0, etc.) or assigned to an absolute 
			expression (in the range 0-7) proceeded by a percent sign.
		Unknown - if symbol does not match any of strings in the PST, MST, or UST.
oPushTermOperator
	% push the term operator to the Term Operator Stack
oEvaluateTerm
	% pop the term operators from the term operator stack and apply them to the term. Push the evaluated term
	 to the expression stack.
oPushExpressionOperator
	% push the expression operator to the expression operator stack
oEvaluateExpression
	% pop the expression operators from the expression operator stack, and apply them to the term stack.
	  Store in local storage for later processing.

//assembled statements

parse:				// will exist in mainline (not as parser object)
  {[
	| pNewLine:
	| *:
	  @statement
  }];

statement:
  [
	| pLabel,pGlobalLabel:
	  @statement
	| pSymbol:
	  [ oChooseSymbol >> type
		| Opcode:			%part of the PST
		  @opcode
		| AssemblerDirective:		%part of the PST
		  @assemblerDirective
		| MacroCall:			%previously defined macro in MST
		  @macroCall
		| Symbol:			%direct assignment statement
		  [
			| pEquals:
		  	  @expression
			| *:
			  #eIllegalStatement
		  ]
	  ]
	| pPeriod:				%current location counter assignment
	  [
		| pEquals:
	  	  @expression
		| *:
		  #eIllegalStatement
	  ]
        | *:
	  #eIllegalStatement
  ];

opCode:
  [ opCode >> type
	| singleOperand:
	  @operand
	  .aSingleOperand
	| doubleOperand1:
	  @operand
	  [
		| pOperandFieldSeparator:
		  @operand
		  .aDoubleOperand
		| *:
		  #eMissingOperator
	  ]
	| doubleOperand2:
	  @registerExpression
	  [
		| pOperandFieldSeparator:
		  @operand
		  .aDoubleOperand
		| *:
		  #eMissingOperator
	  ]
	| branch:
	  @expression
	  [ oChooseExpression >> type
		| abosolute,relocatable:
		  [ oChooseExpressionValue >> value
			| -128 - 127:
			  .aBranch
			| *
			  #eBranchOutofRange
		  ]
		| *:
		  #eIllegalBranchExpression
	  ]
	| jumpSubroutineRTS:
	  @registerExpression
	  .aJumpSubroutineRTS
	| jumpSubroutineMARK:
	  @expression			%not sure about this
	  .aJumpSubroutineMARK
	| jumpSubroutineSOB:
	  @registerExpression
	  [
		| pOperandFieldSeparator:
		  @expression
		  [ oChooseExpression >> type
			| absolute,relocatable:
			  [ oChooseExpressionValue >> value
				| 0-63:
				  .aJumpSubroutineSOB
				| *:
				  #eBranchOutofRange
			  ]
			| *:
			  #eIllegalBranchExpression
		  ]
		| *:
		  #eMissingOperand
	  ]
	| trapInterrupt1:
	  [
		| pNumericLiteral:
		  [
			| 0-377:
			  .aTrapInterrupt
			| *:
			  #eIllegalTrap
		  ]
		| *:
		  #eIllegalTrap
	  ]
	| trapInterrupt2:
	  .aTrapInterrupt
	| conditionCode:
	  .aConditionCode
	| miscellaneous:
	  .aMiscellaneous
	| miscellaneousSPL
	  [
		| pNumericLiteral:
		  [
			| 0-7:
			  .aMiscellaneousSPL
			| *:
			  #eIllegalSPL
		  ]
		| *:
		  #eIllegalSPL
	  ]
  ];

operand:
  [
	| pSymbol:
	  [ oChooseSymbol  >> type
		| Register:
		  .aRegisterMode
		| *:
		  @expression
		  [
			| pLeftParen:
			  @registerExpression
			  [
				| pRightParen:
				  .aIndexMode
				| *:
				  #eIllegalOperandSpecification
			  ]
			| *:
			  .aRelativeMode
		  ]
	  ]
	| pDeferredAddressingIndicator:
	  [
		| pSymbol:
	  	  [ oChooseSymbol  >> type
			| Register:
			  .aRegisterDeferredMode
			| *:
		 	  @expression
			  [
				| pLeftParen:
				  @registerExpression
				  [
					| pRightParen:
					  .aIndexDeferredMode
					| *:
					  #eIllegalOperandSpecification
				  ]
				| *:
				  .aRelativeDeferredMode
			  ]
		| pMinus:
		  [
			| pLeftParen:
			  @registerExpression
			  [
				| pRightParen:
				  .aAutoDecrementDeferredMode
				| *:
				  #eIllegalOperandSpecification
			  ]
			| *:
			  #eIllegalOperandSpecification
		  ]
		| pLeftParen:
		  @registerExpression
		  [
			| pRightParen:
			  [
				| pPlus:
				  .aAutoIncrementDeferredMode
				| *:
				  #eIllegalOperandSpecification
			  ]
			| *:
			  #eIllegalOperandSpecification
		  ]
		| pImmediateExpressionIndicator:
		  @expression
		  .aAbsoluteMode
	  ]
	| pLeftParen:
	  @registerExpression
	  [
		| pRightParen:
		  [
		  	| pPlus:
			  .aAutoIncrementMode
			| *:
			  .aRegisterDeferredMode
		  ]
		| *:
		  #eIllegalOperandSpecification
	  ]
	| pMinus:
	  [
		| pLeftParen:
		  @expression
		  [
			| pRightParen:
			  .aAutoDecrementMode
			| *:
			  #eIllegalOperandSpecification
		  ]
		| *:
		  #eIllegalOperandSpecification
	  ]
	| pImmediateExpressionIndicator:	%Must be Immediate Mode
	  @expression
	  .aImmediateMode
  ];


registerExpression:
  [
	| pSymbol:
	  [ oChooseSymbol  >> type
		| Register:
		  >
		| *:
		  @expression
		  [ oChooseExpression >> type
			| absolute:
			  [ oChooseExpressionValue >> value
				| 0-7:
				  >
				| *:
				  #eIllegalRegisterExpression
			  ]
			| *:
			  #eIllegalRegisterExpression
		  ]
	    ]
	| *:
	  #eIllegalRegisterExpression
  ];

expression:
  @term
  {[
	| pPlus,pMinus,pMultiply,pDivide,pAnd,pOr:
	  oPushExpressionOperator
	  @expression
	| *:
	  oEvaluateExpression
	  >
  ]};


term:
  {[
	| pPlus,pMinus,pUnary:
	  oPushTermOperator
	  @term
	| pLeftBracket:
	  @expression
	  [
		| pRightBracket:
		  oEvaluateTerm
		  >
		| *:
		  #eIllegalTerm
	  ]
	| pNumericLiteral:
	  oEvaluateTerm
	  >
	| pPeriod:
	  oEvaluateTerm
	  >
	| pSymbol:
	  [ oChooseSymbol >> type
		| symbol,opcode:
		  oEvaluateTerm
		  >
		| *:
		  #eIllegalTerm
		  >
	  ]
	| pSingleASCII:
	  [
		| pSymbol		%check if single ASCII character
		  oEvaluateTerm
		  >
		| *:
		  #eIllegalTerm
		  >
	  ]
	| pDoubleASCII:
	  [
		| pSymbol		%check if double ASCII character
		  oEvaluateTerm
		  >
		| *:
		  #eIllegalTerm
		  >
	  ]
  ]};


assemblerDirective:
  [

  ];

macroCall:
  [

  ];